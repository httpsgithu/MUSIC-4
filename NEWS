MUSIC NEWS --- history of user-visible changes.
Copyright (C) 2009, 2010, 2019, 2020, 2021, 2023 INCF

Please send MUSIC bug reports to music-bugs@incf.org.


Changes in 1.2.1:

* python support

** Remove reliance on deprecated distutils

Don't rely on distutils which is deprecated and will disappear in
Python 3.12.

** Fix problems with Automake putting python files in wrong places

On Debian systems, the autotools build system 1) placed python modules
in the site-packages directory when they should have been placed in
the dist-packages directory. Also, 2) if prefix was /usr/local, an
extra local was added for library installation due to a buggy
autotools aclocal macro. These problems have now been circumvented.


Changes in 1.2.0:

* music library

** Switch from C++ to C MPI interface

The MPI C++ interface has been deprecated for some time. MUSIC has now
switched to using the MPI C interface internally and now also uses it
in some places in the MUSIC API, for example in Setup::communicator().

The switch should be backward compatible when compiling existing
applications since objects will be implicitly type converted.

** The MUSIC library version has been bumped to 1.2.0

This is due to the ABI change induced by the switch to the MPI C
interface.

** The MUSIC repository is now mirrored at eBrains

The MUSIC repository now uses github workflows to update a mirror at
https://gitlab.ebrains.eu/djurfeld/MUSIC.git


Changes in 1.1.17:

* music library

** Support for Python3

Python support was updated to support Python3.

** Fixes to the postponed setup mechanism

The PyNN/MUSIC interface depends on a postponed setup mechanism which
now works.

** Several bugfixes throughout

* music utility

** New manpages

New manpages were created for contsink and messagesource.

* python support

** Call runtime.finalize()

Call runtime.finalize() in python example utilities.


Changes in 1.1.16:

* music library

** Interim release

This is an interim release in preparation for the MUSIC 2.0 release.

* music utility

** Novel invocation style

The standard method of launching a MUSIC co-simulation is through the
music utility. On some systems, this method can't be supported. README
documents an alternative novel way of launching MUSIC co-simulations.


Changes in 1.0.7:

* music library

** Bug fix release.


Changes in 1.0.6:

* music library

** Fixes for GCC version 4.4.

** Don't include RPATH in libmusic.so.


Changes in 1.0.5:

* music library

** Optimizations of event routing.  MUSIC now discovers ranges of
   indices which can be handled collectively by one entry in the event
   router, even in the case that this is not apparent from index maps
   but due to the effect of negotiations with the port connected on
   the other side.

** Bug fixes.
   

Changes in 1.0.4:

* test directory

** New example: messages.music

* music library

** Message ports now work correctly.

** Optimizations.


Changes in 1.0.3:

* music library

** Fixes a bug which occurs in Runtime::finalize () when using the
   threading version of the Setup constructor under OpenMPI 1.2.7.

** Other smaller fixes.


Changes in 1.0.2:

* music library

** Better error reporting.

** Bug fixes.

** New README file in test directory.

** New demo in test directory.


Changes in 1.0.1:

* music utility

** Bug fixes

** Improved error reporting

** New option '-m' prints application rank mapping

** New option '-v' prints version information

** Debian packaging support


First release: 1.0

Local variables:
mode: outline
paragraph-separate: "[ 	]*$"
end:
